Mongoose is an abstraction layer ontop of MongoDB native driver

mongoose document is a direct mapping to the mongoDB document

Mongoose is more of a document modelling tool than a mapper


we will use express router middleware

mongoose schema types vs js types

String <=> String
Number <=> String
Date <=> object
Buffer <=> object
Boolean
Mixed <=> object
ObjectId <=> object
Array <=> Array(object)



========
QUERYING
========

When  using query methods if you do not supply a callback they will return an query object which you can call exec() on 
you can chain this on one line by going Standup.find(conditions).exec()

const Standup = require("models/standup");

Standup.find({}) // find all
Standup.find({memberName: "David"}) // find David

Standup.find({memberName: "David"}, "memberName, impediment") // find david, return only the memberName and impediment parts of the object



Standup.findOne({memberName: "David"}) // find one


Standup.findById(id) // just id not an object

Standup.findById(id, '-impediment') // return all fields EXCEPT impediment


comparison query operators:
these are the same as in MongoDB 

$gt 	greater than
$gte 	greater than equal to
$in 	exists in
$lt 	less than
$lte 	less than or equal to
$ne 	not equal to
$nin 	does not exist



Customer.find({discount: {$gte: 10}}, (err, results) => {});
Customer.find({discount: {$gte: 10, $lte 20}}, (err, results) => {});


Queries are chainable so where methods can be added on eg

Customer.where("discount")
	.gte(10)
	.lte(20)
	.where("zipCode", "12345") // where has second param which is the value we're searching for
	.exec(callback)




========
UPDATING
========

its possible to query a document, modify it and save it back
but there's a better way, which requires only one database call


methods we will use

updateOne()
updateMany() // for updating multiple docs with same data
deleteOne()
deleteMany();
findByIdAndUpdate();
findByIdAndDelete();


updateOne()

const query = {memberName: "Marry"}
const newDoc = {memberName: "Mary"}

Standup.updateOne(query, newDoc, () => {// callback}) // this will change the first matching document (memberName: marry) to memberName Mary



Standup.updateMany

const qry = {impediment: ''},
const update = 

Standup.updateMany(
	{impediment: ''},
	{impediment: "None"},
	() => {
		//callback}
	)


==========
VALIDATORS
==========


Validation is defined in the mongoose schema type 

All of these have the Required validator available, as well as the following validators per type

String: enum, match, minlength, maxlength
Number: min, max
Date 
Buffer
Boolean
Mixed 
ObjectId
Array 


String Match - can use regex

const reMatch = /[a-zA-Z]/

const customerSchema = new mongoose.Schema({
	name: {
		type: String,
		required: true,
		match: reMatch
	}
})


String enum 

const validValues = ["enum1", "enum2"]
const customerSchema = new mongoose.Schema({
	name: {
		type: String,
		required: true,
		enum: validValues
	}
})



Number min/max

//.. = mongoose.Schema({
	discount: {type: number, min: 5, max: 60}
})



What is middleware? functions which are given control of the execution flow during the following methods

validate
save
remove
init

we're focusing on save

validation flow of execution

Save is called
default values are applied
validation occurs
error / success returned (via callback)


=================
CUSTOM VALIDATORS
=================

As well as the built in validators, we can write custom validators

validators are written arrays.
arg1 is a function which takes the value and must return true or false (allow or reject)
arg2 is an error message

const sizeValidator = [
	function(value){
		return (value.length > 0 && value.length <= 50
	},
	"Error, length must be between 1 an 50 chars long
]

to attach a custom validator use the following

... = mongoose.Schema({
	name: {type: string, required: true, validate: sizeValidator}
})


we can use properties like {PATH} and {VALUE} in the error message of a custom validator to refer to the property and supplied value respectively


const requiredStringValidator = [
	function(val) {
		let testVal = val.trim();
		return testVal.length > 0;
	},
	"Please supply a value for {PATH}"
]