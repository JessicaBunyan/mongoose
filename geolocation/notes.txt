What is a location?

a latitude (dist north/south of equator) - north is positive
a longitude (dist east/west of Greenwich) - east is positive

These can be written in old school e.g latitude might be: 47Â° 38' 34" N, 

but we will be using the decimal forms 



How the browser gets your location

whether each of these are used depends on if your device supports them/has them enabled

GPS - e.g on a mobile device. GPS can also include altitude and heading info
IP address-  uses database of known IP addresses to physical location. - not perfect but can still be applicable
Wifi - uses database of known wifi access points and calculates your distance from it - also not perfect
Cell Phone triangulation - measure distance and signal strength from one or more cell phone towers


typically you won't know which method your browser is using, and you don't need to - but you can ask browser for a measure of accuracy


geolocation is supported on ie 9+, all good browsers incl. mobile


getCurrentPosition has three typical error responses: 
1. Permission Denied (by user)
2. Position Unavailable
3. Timeout

the numbers correspond to the error codes (from error.code property)



as well as getCurrentPosition we can use watchPosition to be notified each time position changes

we can cancel the callback when we call clearWatch() with a tracking id - e.g

const tid = navigator.geolocation.watchPosition(callback)
clearWatch(tid)



watchPosition can be battery draining - use with caution


google maps API

google.maps.geometry - helper library

google.maps.geometry.spherical.computeDistanceBetween(LatLng, LatLng, radius)

in our case - the radius of the sphere is radius of planet earth - this is default so this argument should be omitted

computeDistanceBetween(a, b)


To use this API you will need an API key from google - do this online
google maps javascript API

then include script in index

script src="[api-url]?key=key&libraries=geometry"

const googleLocation = new google.maps.LatLng(lat, lng) - gmaps object - can be useful to use - this is the param type required for computeDistanceBetween function

function computeTotalDistance(){
  let totalDistance = 0

  if (locations.length > 1){
    for (let i=1; i< locations.length; i++){
      totalDistance += google.maps.geometry.spherical.computeDistanceBetween(locations[i-1], locations[i])
    }
  }

  return totalDistance
}



